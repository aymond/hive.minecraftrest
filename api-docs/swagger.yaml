openapi: 3.0.3
info:
  title: MinecraftREST API
  description: |
    A RESTful API for managing Minecraft servers. This API provides secure endpoints for server management,
    player interactions, and real-time server information.
    
    ## Authentication
    All endpoints except `/api/auth/login` require JWT authentication via Bearer token.
    Get your token by authenticating through the login endpoint.
    
    ## Rate Limiting
    The API implements rate limiting to prevent abuse. Default limit is 60 requests per minute.
  version: '1.0.0'
  contact:
    name: aymond
    url: https://github.com/aymond/hive.minecraftrest
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4567
    description: Local Minecraft server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the login endpoint

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "your-secure-password"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized"

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ServerInfo:
      type: object
      properties:
        version:
          type: string
          example: "git-Paper-1.20.4"
        bukkit_version:
          type: string
          example: "1.20.4-R0.1-SNAPSHOT"
        server_name:
          type: string
          example: "Paper"
        online_mode:
          type: boolean
          example: true
        max_players:
          type: integer
          example: 20
        current_players:
          type: integer
          example: 5
        worlds:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "world"
              player_count:
                type: integer
                example: 3
              time:
                type: integer
                example: 12000
              weather:
                type: string
                enum: [clear, stormy]
                example: "clear"

    PlayerInfo:
      type: object
      properties:
        name:
          type: string
          example: "Steve"
        uuid:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        gamemode:
          type: string
          enum: [SURVIVAL, CREATIVE, ADVENTURE, SPECTATOR]
          example: "SURVIVAL"
        health:
          type: number
          format: double
          example: 20.0
        level:
          type: integer
          example: 30

    PlayersResponse:
      type: object
      properties:
        online_players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerInfo'
        max_players:
          type: integer
          example: 20

paths:
  /api/auth/login:
    post:
      security: []
      tags:
        - Authentication
      summary: Authenticate and get JWT token
      description: Login with admin credentials to obtain a JWT token for API access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/server/info:
    get:
      tags:
        - Server Management
      summary: Get server information
      description: Retrieve detailed information about the Minecraft server
      responses:
        '200':
          description: Server information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/server/command:
    post:
      tags:
        - Server Management
      summary: Execute server command
      description: Execute a command on the server console
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - command
              properties:
                command:
                  type: string
                  example: "say Hello World"
      responses:
        '200':
          description: Command executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Command execution failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/broadcast:
    post:
      tags:
        - Server Management
      summary: Broadcast message
      description: Send a message to all online players
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: "Server will restart in 5 minutes"
      responses:
        '200':
          description: Message broadcast successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/players:
    get:
      tags:
        - Player Management
      summary: List online players
      description: Get information about all online players
      responses:
        '200':
          description: Players list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/player/message:
    post:
      tags:
        - Player Management
      summary: Send message to player
      description: Send a private message to a specific player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - player
                - message
              properties:
                player:
                  type: string
                  example: "Steve"
                message:
                  type: string
                  example: "Hello, how are you?"
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/player/kick:
    post:
      tags:
        - Player Management
      summary: Kick player
      description: Kick a player from the server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - player
              properties:
                player:
                  type: string
                  example: "Steve"
                reason:
                  type: string
                  example: "Breaking server rules"
      responses:
        '200':
          description: Player kicked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/player/gamemode:
    post:
      tags:
        - Player Management
      summary: Change player gamemode
      description: Change the gamemode of a specific player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - player
                - gamemode
              properties:
                player:
                  type: string
                  example: "Steve"
                gamemode:
                  type: string
                  enum: [SURVIVAL, CREATIVE, ADVENTURE, SPECTATOR]
                  example: "CREATIVE"
      responses:
        '200':
          description: Gamemode changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid gamemode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Server Management
    description: Endpoints for managing the Minecraft server
  - name: Player Management
    description: Endpoints for managing players 